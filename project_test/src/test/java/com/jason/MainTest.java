package com.jason;import com.github.javafaker.Faker;import com.google.common.base.CaseFormat;import com.jason.model.User;import com.jason.util.DesUtils;import com.jason.util.IdGenerator;import net.lingala.zip4j.core.ZipFile;import net.lingala.zip4j.exception.ZipException;import net.lingala.zip4j.model.ZipParameters;import net.lingala.zip4j.util.Zip4jConstants;import org.apache.log4j.Logger;import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;import org.jasypt.encryption.pbe.config.EnvironmentPBEConfig;import org.junit.Test;import org.springframework.core.io.ClassPathResource;import org.springframework.util.AntPathMatcher;import org.springframework.web.client.RestTemplate;import java.io.*;import java.math.BigDecimal;import java.nio.charset.Charset;import java.nio.charset.StandardCharsets;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.Timestamp;import java.text.DateFormat;import java.text.MessageFormat;import java.text.SimpleDateFormat;import java.time.LocalDateTime;import java.util.*;import java.util.concurrent.ArrayBlockingQueue;import java.util.concurrent.ThreadPoolExecutor;import java.util.concurrent.TimeUnit;import java.util.concurrent.atomic.AtomicInteger;import java.util.concurrent.atomic.AtomicLong;import java.util.stream.Collectors;import java.util.zip.ZipEntry;import java.util.zip.ZipInputStream;public class MainTest {    Logger logger = Logger.getLogger(MainTest.class);    @Test    public void test1() {        System.out.println("1111");    }    @Test    public void test2() {//        BitSet bitSet = new BitSet();//        bitSet.set(0);//        System.out.println(bitSet.get(0));//        String aa = "";//        System.out.println(Optional.ofNullable(aa).orElse(""));        AntPathMatcher antPathMatcher = new AntPathMatcher();        System.out.println(antPathMatcher.match("/**", "/user/a/a/a/list"));        System.out.println(antPathMatcher.match("/user/**/list", "/user/a/a/a/list"));        String url = "/api/tac-disposal/dict,/api/tac-disposal/common/treeList\n" +                ",/api/tac-disposal/common/getDynamicFields";        String[] split = url.split(",");        for (String s : split) {            System.out.println(s.trim());        }        List<Integer> s1 = new ArrayList<>();        s1.add(1);        s1.add(2);        s1.add(3);        List<Integer> s2 = new ArrayList<>();        s2.add(2);        s2.add(3);        s1.removeIf(s -> !s2.contains(s));        System.out.println(s1);    }    @Test    public void test3() {        AtomicInteger atomicInteger = new AtomicInteger();        System.out.println(atomicInteger.addAndGet(5));        System.out.println(atomicInteger.addAndGet(5));        System.out.println(atomicInteger.get());        System.out.println((String) null);    }    @Test    public void test4() throws InterruptedException {        AtomicLong atomicLong = new AtomicLong();        for (int i = 0; i < 2000; i++) {            new Thread(atomicLong::getAndIncrement).start();        }        Thread.sleep(10000);        System.out.println(atomicLong.get());    }    @Test    public void test5() {        Faker faker = new Faker(Locale.CHINA);        System.out.println(faker.name().name());        System.out.println(faker.address().fullAddress());        System.out.println(faker.address().streetAddress());        System.out.println(Math.abs(-1));        System.out.println(Math.abs(faker.random().nextLong()));        System.out.println(new Timestamp(System.currentTimeMillis()));        System.out.println(faker.number().randomNumber());        System.out.println(faker.name().username());        for (int i = 0; i < 100; i++) {            System.out.println(faker.address().streetName());        }    }    @Test    public void test6() throws IOException {        LocalDateTime localDateTime = LocalDateTime.now();        localDateTime = localDateTime.plusDays(1);        System.out.println(localDateTime.getYear());        System.out.println(localDateTime.getMonthValue());        System.out.println(localDateTime.getDayOfMonth());        System.out.println(localDateTime.getHour());        System.out.println(localDateTime.getMinute());        System.out.println(localDateTime.getSecond());        String cmd = " cmd /c time 19:50:00";        Runtime.getRuntime().exec(cmd); // 修改时间        cmd = " cmd /c date 2012-01-02";        Runtime.getRuntime().exec(cmd); // 修改日期        System.out.println(new Date());    }    @Test    public void test7() throws InterruptedException {        RestTemplate restTemplate = new RestTemplate();        while (true) {            restTemplate.getForObject("http://localhost:11020/plat/test/log/100", String.class);            Thread.sleep(5000);        }    }    @Test    public void test8() throws InterruptedException {        encrypt_zip("密码文件(打开密码为手机号后6位).csv", "encrypt.zip", "123456");//        Thread.sleep(10000);//        new File("encrypt.zip").delete();    }    @Test    public void test9() throws Exception {        System.out.println(DesUtils.decrypt("ApZ8gIgrczQy734elb/ASQ=="));        System.out.println(DesUtils.decrypt("d2ViQXBwOndlYkFwcA=="));        final Random random = new Random();        for (int i = 0; i < 10; i++) {            System.out.println(random.nextInt(9) + 1);        }        new InterfaceTest() {            @Override            public void test() {            }            @Override            public void test1() {            }        };    }    @Test    public void test10() {        for (int i = 0; i < 10; i++) {            System.out.println("i:" + i);            for (int j = 0; j < 10; j++) {                System.out.println("j:" + j);                for (int k = 0; k < 10; k++) {                    System.out.println("k:" + k);                    if (k == 5) {                        return;                    }                }            }        }    }    @Test    public void test11() {        String[] array = new String[]{"a", "b", "a", "c"};        Set<String> set = new HashSet<>();        set.addAll(Arrays.asList(array));        set.addAll(Arrays.asList(array));        System.out.println(set);        String ss = "/a/b/c/**";        ss = ss.replaceAll("\\*", "");        System.out.println(ss);    }    @Test    public void test12() {        String url = "/standard/function/page, /plat/perm/list-by-group, /device/child/page, /product, /device/count/tenant, /profile/edit, /tenant/products/delete, /device/building/page, /plat/user-apply/perm/list, /task/page, /standard/function/add, /device/page, /product-category/add, /plat/activate-service/queryOpenServiceList, /plat/function/menu/update-sort, /plat/activate-service/cancelService, /plat/service/packing/manage-add, api/pipecenter/coordtrans, /plat/perm/update, /product-category/edit, /plat/tenant/update, /product-category/delete, 1, /coordtrans, /modelDefineition, /device/freeze, /standard/service/page, /equipmentDetail, /plat/user-apply/group/perm/list, /task/add, /protocol/delete, /protocol-secret/page, product/devices/count, /standard/profile/page, /parser/add, /plat/perm/save, /standard/service/edit/states, /plat/perm/delete, /plat/tenant/updateStatus, /protocol, /tenant, /plat/activate-service/queryAllServices, /protocol/edit, /device/unfreeze, /device/edit, /standard/function/edit/states, /profile-data/page, /plat/user/update, /product/delete, /plat/function/func/tree, /south-app/edit, /tenant/delete, /south-app/add, /plat/group-authorize/user/list, /plat/dict-detail/detail-list, /plat/dict-detail/updateDictsSort, /product/south-app/page, /plat/service-perm/update," + " /plat/tenant/save, /platform/tokens/remove-token, /standard/profile/edit/states, /protocol/page, /plat/user-authorize/group/delete, /standard/service/delete, api/pipecenter/file, /parser/product-id, /plat/service/packing/list, /device/add, /plat/function/menu/update, /user/download-pwd, /tenant/irrelevant-products/page, /plat/service/packing/info, /protocol-secret/add, /plat/dict/list, /product/tenant-id, /pro\n" + "duct/page, /standard/service/edit, /plat/service/packing/manage-verify, /plat/dict-detail/update, /protocol-secret/delete, /south-app/url/access, /plat/user/save, /profile/release, /task/update/properties, /" + "south-app/relevance/south-products, /plat/function/add, /profile-data/event, /device/detail, /tenant/page, /plat/group-authorize/delete, /plat/service-perm/save, /south-product/condition, /plat/service/packing/enable, /serveDefineition, /plat/function/list, /water-user/detail, /running-log/page, /plat/dict-detail/save, /plat/user/platform-reset-pwd, api/pipecenter/tenant/config/layer, /south-app/page, /plat/subsystem/delete, /plat/group-authorize/info, /plat/function/info, /plat/group-authorize/perm/list, /plat/activate-service/page/list, /plat/function/delete, api/pipecenter/dict, /product/edit, api/pipecenter/tenant/config/layer/-, /south-app, /plat/perm/list-by-user, /plat/service/packing/disable, /plat/dict-detail/tree, /plat/subsystem/editSystem, /plat/tenant/subAccountPage, /tenant/products/page, /plat/activate-service/openServices, /product-category/all, /standard/service, /tenant/out/list/all, /plat/user-apply/perm/remove, /manufacturer/tenant-id, /plat/user-apply/group/list, /productDetail, api/pipecenter/gps, /tenant/products/add, /plat/subsystem/addSystem, /standard/profile/delete, /plat/service-perm/delete";        String[] urls = url.split(",");        System.out.println(urls.length);        byte[][] cacheKey = new byte[10][];        cacheKey[0] = new byte[]{1, 2};        System.out.println(Arrays.deepToString(cacheKey));    }    @Test    public void test13() {        AtomicInteger atomicInteger = new AtomicInteger();        atomicInteger.getAndIncrement();        atomicInteger.getAndIncrement();        atomicInteger.getAndIncrement();        System.out.println(atomicInteger);        List<String> a = new ArrayList<>();        List<String> b = a;        System.out.println(b);    }    @Test    public void test14() throws IOException {        ClassPathResource classPathResource = new ClassPathResource("UserMapper.xml");        InputStream inputStream = classPathResource.getInputStream();        byte[] buffer = new byte[100];        StringBuilder content = new StringBuilder();        while (inputStream.read(buffer) != -1) {            content.append(new String(buffer));        }        System.out.println(content);    }    @Test    public void test15() {        Map<User, Integer> map = new HashMap<>();        User user1 = new User(1, "Jason");        System.out.println(user1.hashCode());        map.put(user1, 1);        User user2 = new User(1, "Jason");        System.out.println(user2.hashCode());        map.put(user2, 2);        System.out.println(map);    }    @Test    public void test16() {        char a = 65;        System.out.printf("%c\n", a);        String dn = "DN40";        System.out.println(Integer.parseInt(dn.substring(2)));        System.out.println(Integer.parseInt(dn.substring(2)) >= 40);    }    @Test    public void test17() {        Map<Integer, List<String>> map = new HashMap<>();        List<String> list = new ArrayList<>();        list.add("a");        list.add("b");        list.add("c");        map.put(1, list);        List<String> strings = map.get(1);        strings.remove("a");        System.out.println(map);    }    @Test    public void test18() {        String message1 = MessageFormat.format("[3.0库->远传]同步water_point_relation_current表数据完成！总数据量:[{0}]，过滤掉已存在的数据量:[{1}]，同步成功的数据量:[{2}]，过滤掉不合法的数据量:[{3}]", 1, 1, 1, 1);        System.out.println(message1);    }    @Test    public void test19() {        String meterDiameter = "50mm";        int caliber = Integer.parseInt(meterDiameter.substring(0, meterDiameter.indexOf("m")));        System.out.println(caliber);    }    @Test    public void test20() {        Map<Integer, Integer> taskingByLayer = new HashMap<>();        taskingByLayer.put(1, 5);        taskingByLayer.put(2, 4);        taskingByLayer.put(3, 1);        taskingByLayer.put(4, 3);        taskingByLayer.put(5, 2);        taskingByLayer.put(6, 6);        System.out.println(taskingByLayer);        Map<Integer, Integer> sortedTaskingByLayer = taskingByLayer.entrySet().stream()                .sorted(Map.Entry.comparingByValue()).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (k1, k2) -> k1, LinkedHashMap::new));        System.out.println(sortedTaskingByLayer);    }    @Test    public void test21() {        String s = "BH10000";        System.out.println(s.substring(2));        System.out.println(Integer.parseInt(s.substring(2)) + 1);    }    @Test    public void test22() {        String x = "1,2,3,";        System.out.println(x.substring(0, x.lastIndexOf(",")));    }    @Test    public void test23() {        Date date = new Date();        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.000");        System.out.println(dateFormat.format(date));        double f = 111231.51;        BigDecimal bg = new BigDecimal(f);        double f1 = bg.setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();        System.out.println(f1);        Map<String, List<String>> map = new HashMap<>();        List<String> list = new ArrayList<>();        list.add("abc");        map.put("list", list);        list.add("bcd");        System.out.println(map);        StringBuilder s = new StringBuilder("a,b,c,");        System.out.println(s.deleteCharAt(s.lastIndexOf(",")));    }    @Test    public void test24() throws Exception {        System.out.println(IdGenerator.getId());        System.out.println((IdGenerator.getId() + "").substring(6));        readZipFile("dict_config_export_20221116192751.zip");    }    @Test    public void test25() {        for (int i = 0; i < 10; i++) {            System.out.println(IdGenerator.getId());        }    }    @Test    public void test26() {        List<String> tenantIds = new ArrayList<>();        tenantIds.add("ALL");        tenantIds.add("654321");        tenantIds.add("123456");        tenantIds.add("tenant   ");        tenantIds.add("   ");        tenantIds.add(null);        if (!tenantIds.isEmpty()) {            tenantIds.removeIf(Objects::isNull);            // 排序            Collections.sort(tenantIds);            StringBuilder belongTenant = new StringBuilder();            for (String tenantId : tenantIds) {                if (Objects.nonNull(tenantId) && !tenantId.trim().isEmpty()) {                    belongTenant.append(tenantId.trim()).append(",");                }            }            int lastIndex = belongTenant.lastIndexOf(",");            if (lastIndex > 0) {                belongTenant.deleteCharAt(lastIndex);            }            System.out.println(belongTenant);        }    }    @Test    public void test27() {        String s = "我1";        System.out.println(s.getBytes(StandardCharsets.UTF_8).length);        String ss = "SJPZ2022121400002";        String numberStr = ss.substring(ss.length() - 5);        System.out.println(numberStr);        int number = Integer.parseInt(numberStr) + 1;        System.out.println(number);        System.out.printf("%05d", number);    }    @Test    public void test28() throws Exception {        String str = "saAGPnyhKPbeF31MF4G//A==";        System.out.println(DesUtils.decrypt(str));    }    @Test    public void test29() {//        // 变量小写连接线转小写驼峰//        System.out.println(CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL, "user-name"));//userName        // 变量小写连接线转大写下划线//        System.out.println(CaseFormat.LOWER_HYPHEN.to(CaseFormat.UPPER_UNDERSCORE, "VOLATILITY_CRITERION"));//user_name//        // 变量小写下划线转小写驼峰//        System.out.println(CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, "user_name"));//userName//        // 变量下划线转大写驼峰//        System.out.println(CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, "user_name"));//UserName//        // 变量小写驼峰转大写驼峰        String str = "inRegion";        boolean upper = true;        for (int i = 0; i < str.length(); i++) {            if (Character.isLowerCase(str.charAt(i))) {                upper = false;                break;            }        }        if (!upper) {            System.out.println(CaseFormat.LOWER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, str));        } else {            System.out.println(str);        }//        // 变量小写驼峰转小写下划线//        System.out.println(CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, "userName"));//user_name//        // 变量小写驼峰转小写下划线//        System.out.println(CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, "UserName"));//user_name//        // 变量小写驼峰转小写连接线//        System.out.println(CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_HYPHEN, "userName"));//user-name    }    @Test    public void test30() {        List<String> typeCodes = Arrays.asList("caliber", "purpose", "principle", "manufactor",                "customerStatus", "deviceStatus", "installMethod", "billMethod", "measurementParam");        System.out.println(typeCodes.get(2));    }    public void readZipFile(String zipFilePath) throws Exception {        //获取文件输入流        FileInputStream input = new FileInputStream(zipFilePath);        //获取ZIP输入流(一定要指定字符集Charset.forName("GBK")否则会报java.lang.IllegalArgumentException: MALFORMED)        ZipInputStream zipInputStream = new ZipInputStream(new BufferedInputStream(input), StandardCharsets.UTF_8);        //定义ZipEntry置为null,避免由于重复调用zipInputStream.getNextEntry造成的不必要的问题        ZipEntry ze = null;        //循环遍历        while ((ze = zipInputStream.getNextEntry()) != null) {            System.out.println("文件名：" + ze.getName() + " 文件大小：" + ze.getSize() + " bytes");            System.out.println("文件内容：");            //读取            BufferedReader br = new BufferedReader(new InputStreamReader(zipInputStream, StandardCharsets.UTF_8));            String line;            //内容不为空，输出            while ((line = br.readLine()) != null) {                System.out.println(line);            }        }        //一定记得关闭流        zipInputStream.closeEntry();        input.close();    }    //加密    @Test    public void getPass() {        StandardPBEStringEncryptor standardPBEStringEncryptor = new StandardPBEStringEncryptor();        EnvironmentPBEConfig config = new EnvironmentPBEConfig();        config.setAlgorithm("PBEWithMD5AndDES");          // 加密的算法，这个算法是默认的        config.setPassword("ansokj");                        // 加密的密钥        standardPBEStringEncryptor.setConfig(config);        String plainText = "root";        String encryptedText = standardPBEStringEncryptor.encrypt(plainText);        System.out.println(encryptedText);        System.out.println(standardPBEStringEncryptor.decrypt("d0c96f52ef5fb651cd26f7b5c7c763ea"));    }    /**     * @param src_file 待压缩文件路径     * @param dst_file zip路径+文件名     * @param encode   加密密码     * @return     * @Title: encrypt_zip     * @Description:将指定路径下的文件压缩至指定zip文件，并以指定密码加密,若密码为空，则不进行加密保护     */    private void encrypt_zip(String src_file, String dst_file, String encode) {        File file = new File(src_file);        ZipParameters parameters = new ZipParameters();        parameters.setCompressionMethod(Zip4jConstants.COMP_DEFLATE);//压缩方式        parameters.setCompressionLevel(Zip4jConstants.DEFLATE_LEVEL_NORMAL); // 压缩级别        if (Objects.nonNull(encode) && !encode.isEmpty()) {            parameters.setEncryptFiles(true);            parameters.setEncryptionMethod(Zip4jConstants.ENC_METHOD_STANDARD);//加密方式            parameters.setPassword(encode.toCharArray());//设置密码        }        try {            ZipFile zipFile = new ZipFile(dst_file);            zipFile.setFileNameCharset("gbk");            zipFile.addFile(file, parameters);        } catch (ZipException e) {            e.printStackTrace();        }    }    /**     * 造数据     *     * @throws Exception     */    @Test    public void mockData() throws Exception {        Faker faker = new Faker(Locale.CHINA);        String[] domain = new String[]{"IOT", "WATERHUB", "BIGDATA"};        String[] calibers = new String[]{"15", "20", "25", "32", "40", "50", "65", "80", "100", "150", "200", "250", "300", "400", "500", "600", "700", "800", "900", "1000", "1100", "1200", "1300", "1400", "1500", "1600"};        Class.forName("com.mysql.cj.jdbc.Driver");        Class.forName("ru.yandex.clickhouse.ClickHouseDriver");//        String url = "jdbc:mysql://10.0.20.137:3306/asset_management_platform?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC";//        String user = "ax_user";//        String password = "ObPB*9Yh";//        String url = "jdbc:mysql://localhost:3306/asset_management_platform?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC";//        String user = "root";//        String password = "123456";        String url = "jdbc:clickhouse://10.0.20.131:8123/default";        String user = "default";        String password = "Anso2022";        String user_sql = "INSERT INTO amp_user_info(id, water_user_name, address, biz_code) VALUES(?, ?, ?, ?)";        String point_sql = "INSERT INTO amp_point_info(id, point_name, address, biz_code) VALUES(?, ?, ?, ?)";        String device_sql = "INSERT INTO amp_device_info(id, device_original_id, create_domain, biz_domain, datasource, datasource_create_time, water_user_id, point_id, device_level, parent_id, is_summary_device, is_building_device, is_real, is_remote, tenant_id, factory_code, device_name, device_type, device_model, caliber, purpose, principle, manufacturer, manufacture_date, biz_code, biz_status, install_address, install_time, commun_model, measure_param, create_user_id, create_time, update_user_id, update_time, is_del, real_update_time, real_create_time, effect_time) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";        ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(32, 64, 10000, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(10240), new ThreadPoolExecutor.CallerRunsPolicy());        int maxTaskCount = 5;        AtomicInteger completeCount = new AtomicInteger();        for (int taskCount = 0; taskCount < maxTaskCount; taskCount++) {            threadPoolExecutor.execute(() -> {                Connection connection = null;                try {                    connection = DriverManager.getConnection(url, user, password);                    connection.setAutoCommit(false);                    PreparedStatement user_ps = connection.prepareStatement(user_sql);                    PreparedStatement point_ps = connection.prepareStatement(point_sql);                    PreparedStatement device_ps = connection.prepareStatement(device_sql);                    List<Long> generateDeviceIds = new ArrayList<>();                    long currentTimeMillis = System.currentTimeMillis();                    int batch = -1;                    do {                        batch++;                        long userId = IdGenerator.getId();                        user_ps.setLong(1, userId);                        user_ps.setString(2, faker.name().fullName());                        String streetAddress = faker.address().streetAddress();                        user_ps.setString(3, streetAddress);                        user_ps.setString(4, "YHBM-" + faker.idNumber().valid());                        long pointId = IdGenerator.getId();                        point_ps.setLong(1, pointId);                        point_ps.setString(2, streetAddress);                        point_ps.setString(3, streetAddress);                        point_ps.setString(4, "JSDBM-" + faker.idNumber().valid());                        long deviceId = IdGenerator.getId();                        int mod = batch % 300;                        int index = batch / 300;                        boolean is_building_device = mod == 0;                        if (is_building_device) {                            generateDeviceIds.add(deviceId);                        }                        long originDeviceId = IdGenerator.getId();                        device_ps.setLong(1, deviceId); // id 主键ID                        device_ps.setLong(2, originDeviceId); // device_original_id 设备原始数据表ID                        device_ps.setString(3, domain[new Random().nextInt(domain.length)]); // create_domain 创建域                        device_ps.setString(4, domain[new Random().nextInt(domain.length)]); // biz_domain 业务域                        device_ps.setString(5, domain[new Random().nextInt(domain.length)]); // datasource 即数据的最根本来源系统//                        device_ps.setTimestamp(6, new Timestamp(currentTimeMillis)); // datasource_create_time 数据的最根本来源系统的创建时间                        device_ps.setDate(6, new java.sql.Date(currentTimeMillis)); // datasource_create_time 数据的最根本来源系统的创建时间                        device_ps.setLong(7, userId); // user_id 用户基本信息表主键ID                        device_ps.setLong(8, pointId); // point_id 接水点接板信息表主键ID                        if (is_building_device) {                            device_ps.setInt(9, 1); // device_level 层级                            device_ps.setLong(10, 0); // parent_id 父级ID                            device_ps.setInt(11, 1); // is_summary_device 是否总表                            device_ps.setInt(12, 1); // is_building_device 是否楼栋表                        } else {                            device_ps.setInt(9, 0); // device_level 层级                            device_ps.setLong(10, generateDeviceIds.get(index)); // parent_id 父级ID                            device_ps.setInt(11, 0); // is_summary_device 是否总表                            device_ps.setInt(12, 0); // is_building_device 是否楼栋表                        }                        device_ps.setInt(13, faker.bool().bool() ? 1 : 0); // is_real 是否真实表                        device_ps.setInt(14, faker.bool().bool() ? 1 : 0); // is_remote 是否远传表                        device_ps.setLong(15, faker.number().randomNumber() + 1); // tenant_id 租户ID                        device_ps.setString(16, faker.idNumber().valid()); // factory_code 出厂编号                        String caliber = calibers[new Random().nextInt(calibers.length)];                        device_ps.setString(17, caliber + "表"); // device_name 设备名称                        device_ps.setString(18, "" + new Random().nextInt(4) + 1); // device_type 设备类型(字典)：水表、消防栓、集中器...                        device_ps.setString(19, faker.idNumber().valid()); // device_model 设备型号                        device_ps.setString(20, caliber); // caliber 口径（字典，DN15、DN20、DN25、DN32、DN40、DN50、DN65、DN80、DN100、DN150、DN200、DN250、DN300、DN400、DN500、DN600、DN700、DN800、DN900、DN1000、DN1100、DN1200、DN1300、DN1400、DN1500、DN1600)                        device_ps.setString(21, "" + (new Random().nextInt(7) + 1)); // purpose 表用途（字典，1、大用户，2、小区监控表，3、分区流量计，4、压力监测点，5、消防表，6、出厂流量计，7、泵站及原水）                        device_ps.setString(22, "" + (new Random().nextInt(5) + 1)); // principle 表原理（字典，1、电磁，2、超声波，3、涡轮，4、机械(WS)，5、机械(WPD)）                        device_ps.setString(23, "生产厂家" + new Random().nextInt(7)); // manufacturer 生产厂家（字典（可能会在系统记录一张表，可能会跟数据权限有关）//                        device_ps.setTimestamp(24, new Timestamp(currentTimeMillis)); // manufacture_date 水表出厂日期                        device_ps.setDate(24, new java.sql.Date(currentTimeMillis)); // manufacture_date 水表出厂日期                        long bizCode = IdGenerator.getId();                        device_ps.setString(25, "" + bizCode); // biz_code 设备编码                        device_ps.setString(26, "" + (new Random().nextInt(4) + 1)); // biz_status 生命周期状态（字典，1、正常，2、注销，3、停用，4、封停）                        device_ps.setString(27, streetAddress); // install_address 安装地址//                        device_ps.setTimestamp(28, new Timestamp(currentTimeMillis)); // install_time 安装时间                        device_ps.setDate(28, new java.sql.Date(currentTimeMillis)); // install_time 安装时间                        device_ps.setString(29, "" + (new Random().nextInt(6) + 1)); // commun_model 通信模式(取字典)，1、NB-IOT，2、4G-GPRS，3、Lora，4、RS-485，5、M-Bus，6、OTHER                        device_ps.setString(30, "" + (new Random().nextInt(2) + 1)); // measure_param 测量参数(取字典)1、流量，2、压力                        device_ps.setLong(31, faker.number().randomNumber() + 1); // create_user_id 创建人//                        device_ps.setTimestamp(32, new Timestamp(currentTimeMillis)); // create_time 创建时间                        device_ps.setDate(32, new java.sql.Date(currentTimeMillis)); // create_time 创建时间                        device_ps.setLong(33, faker.number().randomNumber() + 1); // update_user_id 修改人//                        device_ps.setTimestamp(34, new Timestamp(currentTimeMillis)); // update_time 修改时间                        device_ps.setDate(34, new java.sql.Date(currentTimeMillis)); // update_time 修改时间                        device_ps.setInt(35, faker.bool().bool() ? 1 : 0); // is_del 是否删除//                        device_ps.setTimestamp(36, new Timestamp(currentTimeMillis)); // real_update_time 实际更新时间                        device_ps.setDate(36, new java.sql.Date(currentTimeMillis)); // real_update_time 实际更新时间//                        device_ps.setTimestamp(37, new Timestamp(currentTimeMillis)); // real_create_time 实际创建时间                        device_ps.setDate(37, new java.sql.Date(currentTimeMillis)); // real_create_time 实际创建时间//                        device_ps.setTimestamp(38, new Timestamp(currentTimeMillis)); // effect_time 最终真实现场发生换表的时间，由工单触发，大数据修正                        device_ps.setDate(38, new java.sql.Date(currentTimeMillis)); // effect_time 最终真实现场发生换表的时间，由工单触发，大数据修正                        user_ps.addBatch();                        point_ps.addBatch();                        device_ps.addBatch();                    } while (batch != 2000 - 1);                    user_ps.executeBatch();                    point_ps.executeBatch();                    device_ps.executeBatch();                    connection.commit();                    user_ps.close();                    point_ps.close();                    device_ps.close();                    completeCount.getAndIncrement();                } catch (Exception e) {                    logger.info("执行发生异常，数据回滚！" + e);                    try {                        if (connection != null) {                            connection.rollback();                        }                    } catch (Exception ex) {                        logger.info("数据回滚失败！" + ex);                    }                }            });        }        long start = System.currentTimeMillis();        while (true) {            if (completeCount.get() == maxTaskCount) {                logger.info("所有任务执行完成！");                break;            } else {                logger.info("任务执行执行中...");                Thread.sleep(3000);            }        }        logger.info("耗时:" + (System.currentTimeMillis() - start) + "ms.");    }    @Test    public void testExcel() {    }}